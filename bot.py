import logging
import glob
import os
import asyncio
from datetime import datetime, timezone, timedelta

from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from telethon.sync import TelegramClient
from telethon.errors.rpcerrorlist import UsernameInvalidError, ChatAdminRequiredError
from telethon.types import Channel

from settings import bot_settings
from bot_menu import menu
from database import orm
from request_report import request, create_report

USER_PARSE_DELAY = 1

logging.basicConfig(
    level=logging.INFO,
    filename = "botlog.log",
    filemode='a',
    format = "%(asctime)s - %(module)s - %(levelname)s - %(funcName)s: %(lineno)d - %(message)s",
    datefmt='%H:%M:%S',
    )

bot = Bot(token=bot_settings.BOT_TOKEN)
storage = MemoryStorage() 
dp = Dispatcher(bot, storage=storage)
#client = TelegramClient(bot_settings.SESSION_NAME, bot_settings.API_ID, bot_settings.API_HASH)
#client.start()

'''–°–æ—Å—Ç–æ—è–Ω–∏—è'''

class ChatOpenLink(StatesGroup):
    waiting_link = State()

class ParsingActive(StatesGroup):
    waiting_link = State()
    last_activity = State()

class ParsingPhones(StatesGroup):
    waiting_link = State()

class Mailing(StatesGroup):
    text = State()
    entity = State()

class Get_id_premium(StatesGroup):
    user_id = State()

class Get_id_admin(StatesGroup):
    user_id = State()

'''–ö–æ–º–∞–Ω–¥—ã'''

async def set_default_commands(dp):
    await dp.bot.set_my_commands(
        [
            types.BotCommand('start', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        ]
    )

'''–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫'''

async def check_link(link):
    try:
        channel = await request.client.get_entity(link)
        print('@@@@@@@@@@@@@@@@@@')
        if isinstance(channel, Channel):
            print('TTTTTTTTTTTTTT')
            return True
        else:
            print('FFFFFFFFFFF')
            return False
    except (UsernameInvalidError, ValueError, ChatAdminRequiredError):
        print('##################')
        return False

'''–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'''

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    text = f'–ü—Ä–∏–≤–µ—Ç *{message.from_user.first_name}*!\n–í–∞—à ID: {message.from_user.id}\n–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    response = orm.add_user(message.from_user.id, message.from_user.username)
    inline_markup = await menu.main_menu()
    username = message.from_user.username
    if response == 1:
        users = orm.get_admins()
        for user in users:
                if message.from_user.username == None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{message.from_user.first_name}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                elif message.from_user.username != None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                else:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML') 
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    await set_default_commands(dp)

''' –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ '''

@dp.callback_query_handler(state=ChatOpenLink.waiting_link)
@dp.callback_query_handler(state=ParsingActive.waiting_link)
@dp.callback_query_handler(state=ParsingPhones.waiting_link)
@dp.callback_query_handler(lambda call: 'back_to_main_menu' in call.data)
async def get_open_report(callback_query: types.CallbackQuery, state: FSMContext):
    text = f'–ü—Ä–∏–≤–µ—Ç *{callback_query.from_user.first_name}*!\n–í–∞—à ID: {callback_query.from_user.id}\n–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')
    await state.finish()

'''–í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'''

@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def get_main_menu(callback_query: types.CallbackQuery):
    text = f'–ü—Ä–∏–≤–µ—Ç *{callback_query.from_user.first_name}*!\n–í–∞—à ID: {callback_query.from_user.id}\n–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')

'''–í—ã–∑–æ–≤ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é'''

@dp.callback_query_handler(lambda call: 'premium_menu' in call.data)
async def get_premium_menu(callback_query: types.CallbackQuery):
    if orm.check_premium(callback_query.from_user.id) == 1:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞'
        inline_markup = await menu.premium_parsing_menu()
        await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')
    else:
        text = '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')

'''–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞'''

@dp.callback_query_handler(lambda call: 'parsing_open_start' in call.data)
async def parsing_open_start(callback_query: types.CallbackQuery):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
    inline_markup = await menu.back_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')
    await ChatOpenLink.waiting_link.set()

'''–ö–Ω–æ–ø–∫–∞ –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è'''

@dp.callback_query_handler(lambda call: 'parsing_activity' in call.data)
async def parsing_activity_start(callback_query: types.CallbackQuery):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
    inline_markup = await menu.back_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')
    await ParsingActive.waiting_link.set()

'''–ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'''

@dp.message_handler(state=ParsingActive.waiting_link)
async def get_filter_activity(message: types.Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    inline_markup = await menu.last_active_menu()
    text = '–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ–Ω–ª–∞–π–Ω?'
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    await ParsingActive.last_activity.set()

'''–ö–Ω–æ–ø–∫–∞ –º–æ–±. —Ç–µ–ª–µ—Ñ–æ–Ω—ã'''

@dp.callback_query_handler(lambda call: 'phones' in call.data)
async def parsing_phones(callback_query: types.CallbackQuery):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
    inline_markup = await menu.back_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')
    await ParsingPhones.waiting_link.set()

'''–ü—Ä–∞—Å–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞'''

@dp.message_handler(state=ChatOpenLink.waiting_link)
async def get_open_report(message: types.Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    state_data = await state.get_data()
    link = state_data.get('waiting_link')
    if await check_link(link):
        ALL_PARTICIPANTS = await request.open_chat_request(link, message.chat.id)
        await create_report.create_open_chat_report(ALL_PARTICIPANTS, 'users')
        await state.finish()
        text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
        inline_markup = await menu.main_menu()
        target = '*.txt'
        file = glob.glob(target)[0]
        await message.reply_document(open(file, 'rb'))
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    else:
        text = '–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
        inline_markup = await menu.back_menu()
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')

'''–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'''

@dp.callback_query_handler(state=ParsingActive.last_activity)
async def parsing_activity_start(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(last_activity=callback_query.data)
    state_data = await state.get_data()
    link = state_data.get('waiting_link')
    online = state_data.get('last_activity').split('_')[1]
    ALL_PARTICIPANTS = await request.activity_request(link, callback_query.from_user.id, online)
    if ALL_PARTICIPANTS:
        await create_report.create_open_chat_report(ALL_PARTICIPANTS, 'users') 
        await state.finish()
        target = '*.txt'
        file = glob.glob(target)[0]
        text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
        inline_markup = await menu.main_menu()
        await bot.send_document(callback_query.from_user.id, open(file, 'rb'))
        await bot.send_message(callback_query.from_user.id, text, reply_markup=inline_markup)
    else:
        text = '–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
        inline_markup = await menu.back_menu()
        await bot.send_message(callback_query.from_user.id, text, reply_markup=inline_markup)
    
'''–ü—Ä–∞—Å–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤'''

@dp.message_handler(state=ParsingPhones.waiting_link)
async def get_phone_numbers(message: types.Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    state_data = await state.get_data()
    link = state_data.get('waiting_link')
    ALL_PARTICIPANTS = await request.open_chat_request(link, message.chat.id)
    if ALL_PARTICIPANTS:
        await create_report.create_open_chat_report(ALL_PARTICIPANTS, 'phones')
        target = '*.txt'
        file = glob.glob(target)[0] 
        await state.finish()
        text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
        inline_markup = await menu.main_menu()
        if os.stat(file).st_size == 0:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—Å–∫—Ä—ã—Ç—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=inline_markup, parse_mode='Markdown')
        else:
            await message.reply_document(open(file, 'rb'))
            await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    else:
        text = '–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è). –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
        inline_markup = await menu.back_menu()
        await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')

'''–í—ã–∑–æ–≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'''                                   

@dp.message_handler(lambda message: orm.check_admin(message.from_user.id) == 1 and message.text == '/admin')
async def get_admin_menu(message: types.Message):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    inline_markup = await menu.admin_menu()
    await message.answer(text, reply_markup=inline_markup)

'''–ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏'''

@dp.callback_query_handler(lambda call: 'create_mailing' in call.data)
async def create_mailing(callback_query: types.CallbackQuery):
    text = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await Mailing.text.set()

'''–†–∞—Å—Å—ã–ª–∫–∞'''

@dp.message_handler(state=Mailing.text)
async def mailing(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text, entity=message.entities)
    state_data = await state.get_data()
    text = state_data.get('text')
    entity = state_data.get('entity')
    users = orm.get_all_users()
    await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É', parse_mode='Markdown')
    count = 0
    count_of_banned = 0
    for user in users:
        try:
            await bot.send_message(user.tg_id, text=text, entities=entity, disable_web_page_preview=True)
            count += 1
            if count == 15:
                asyncio.sleep(USER_PARSE_DELAY)
                count = 0
        except:
            count_of_banned += 1
    answer = f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {len(users)-count_of_banned}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {count_of_banned}'
    orm.add_blocked(count_of_banned)
    await message.answer(answer, parse_mode='Markdown')
    await state.finish()

'''–ö–Ω–æ–ø–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞'''

@dp.callback_query_handler(lambda call: 'set_premium' in call.data)
async def button_premium(callback_query: types.CallbackQuery):
    text = '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await Get_id_premium.user_id.set()

'''–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''

@dp.message_handler(state=Get_id_premium.user_id)
async def create_premium(message: types.Message, state: FSMContext):
    await state.update_data(user_id=message.text)
    state_data = await state.get_data()
    user_id = state_data.get('user_id')
    current_time_utc =  datetime.now(timezone.utc)
    target_time = current_time_utc + timedelta(hours=240, minutes=0)
    orm.get_premium(user_id, current_time_utc, target_time)
    await state.finish()
    await bot.send_message(int(user_id), '–í–∞–º –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –Ω–∞ 10 –¥–Ω–µ–π', parse_mode='Markdown')
    inline_markup = await menu.admin_menu()
    await message.answer('–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', reply_markup=inline_markup)

'''–ö–Ω–æ–ø–∫–∞ –¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'''

@dp.callback_query_handler(lambda call: 'set_admin_previlegies' in call.data)
async def button_admin(callback_query: types.CallbackQuery):
    text = '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await Get_id_admin.user_id.set()

'''–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'''

@dp.message_handler(state=Get_id_admin.user_id)
async def create_admin(message: types.Message, state: FSMContext):
    await state.update_data(user_id=message.text)
    state_data = await state.get_data()
    user_id = state_data.get('user_id')
    orm.get_admin(user_id)
    await state.finish()
    inline_markup = await menu.admin_menu()
    await message.answer('–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ', reply_markup=inline_markup)

'''–í—ã–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'''

@dp.callback_query_handler(lambda call: 'stat' in call.data)
async def get_stat(callback_query: types.CallbackQuery):
    stat = orm.stat()
    text = f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stat[0]}\n–£–¥–∞–ª–∏–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º: {stat[1]}\n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–∏–≤—à–∏—Ö —á–∞—Ç —Å –±–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏*'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')

''' –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞ '''

@dp.callback_query_handler(lambda call: 'buy_premium' in call.data)
async def button_buy(callback_query: types.CallbackQuery):
    await bot.send_invoice(
    callback_query.from_user.id,
    title='–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞',
    description='–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 10 –¥–Ω–µ–π',
    provider_token=bot_settings.PAYMENT_TOKEN,
    currency='rub',
    photo_url=bot_settings.IMAGE_URL,
    photo_height=512, 
    photo_width=512,
    photo_size=512,
    is_flexible=False, 
    prices=[bot_settings.PRICE],
    start_parameter='10-days-premium',
    payload='something'
)


@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    # –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—á—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    current_time_utc =  datetime.now(timezone.utc)
    target_time = current_time_utc + timedelta(hours=240, minutes=0)
    orm.get_premium(message.from_user.id, current_time_utc, target_time)
    await bot.send_message(message.chat.id,'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)